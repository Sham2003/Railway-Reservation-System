/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.miniproject.railwaysystem;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sham
 * Background ChennaiCentral.jpg
 */
public class BookTicket extends javax.swing.JFrame {
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    Connection conn;
    int price;
    private int pcount;
    private int total;
    private String tid,src,dest; 
    java.sql.Date sdate;
    /**
     * Creates new form BookTicket
     * @param conn
     * @param tid
     * @param dest
     * @param src
     * @param sdate
     */
    public BookTicket(Connection conn, String tid, String src, String dest, java.sql.Date sdate) {
        this.price = 0;
        this.conn = conn;
        this.pcount = 0;
        this.tid = tid;
        this.src = src;
        this.dest = dest;
        this.sdate = sdate;
        initComponents();
        
        this.Train.repaint();
        this.srcStat.repaint();
        this.destStat.repaint();
        this.jDate.repaint();
        updateBill();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backBtn = new com.miniproject.railwaysystem.Widgets.KButton();
        ticInterface = new javax.swing.JPanel();
        Train = new com.miniproject.railwaysystem.Widgets.ComboBox();
        srcStat = new com.miniproject.railwaysystem.Widgets.ComboBox();
        destStat = new com.miniproject.railwaysystem.Widgets.ComboBox();
        jDate = new com.miniproject.railwaysystem.Widgets.TextField();
        classType = new com.miniproject.railwaysystem.Widgets.ComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        PTable = new javax.swing.JTable();
        reserve = new com.miniproject.railwaysystem.Widgets.KButton();
        addPassenger = new com.miniproject.railwaysystem.Widgets.KButton();
        noTickets = new javax.swing.JLabel();
        totalAmt = new javax.swing.JLabel();
        Title = new javax.swing.JLabel();
        Bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Railway Reservation System");
        setIconImage(new javax.swing.ImageIcon("D:\\dbms\\RailwaySystem\\src\\main\\java\\com\\miniproject\\railwaysystem\\Assets\\TrainIcon.jpg").getImage());
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backBtn.setBackground(new java.awt.Color(255, 102, 102));
        backBtn.setText("<--");
        backBtn.setkEndColor(new java.awt.Color(0, 0, 0));
        backBtn.setkHoverEndColor(new java.awt.Color(204, 204, 204));
        backBtn.setkHoverForeGround(new java.awt.Color(0, 0, 0));
        backBtn.setkHoverStartColor(new java.awt.Color(204, 204, 204));
        backBtn.setkStartColor(new java.awt.Color(102, 102, 102));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        jPanel1.add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 40, 30));

        ticInterface.setBackground(new java.awt.Color(255, 255, 255));
        ticInterface.setForeground(new java.awt.Color(234, 68, 66));
        ticInterface.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Train.setModel(getTrains());
        Train.setSelectedIndex(this.getTrainItem());
        Train.setLabeText("Train");
        Train.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TrainItemStateChanged(evt);
            }
        });
        ticInterface.add(Train, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 336, 50));

        srcStat.setModel(getSrcStats());
        srcStat.setSelectedIndex(this.getSrcStat());
        srcStat.setLabeText("Boarding Station");
        srcStat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                srcStatItemStateChanged(evt);
            }
        });
        ticInterface.add(srcStat, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 207, 60));

        destStat.setModel(getDestStats());
        destStat.setSelectedIndex(this.getDestStat());
        destStat.setLabeText("Destination Station");
        ticInterface.add(destStat, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 70, 207, 50));

        jDate.setText((this.sdate!=null)?sdf.format(this.sdate):"");
        jDate.setHelperText("dd-MM-yyyy");
        jDate.setLabelText("Journey Date");
        jDate.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jDate.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jDateHierarchyChanged(evt);
            }
        });
        jDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDateActionPerformed(evt);
            }
        });
        jDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jDateKeyReleased(evt);
            }
        });
        ticInterface.add(jDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 207, 60));

        classType.setModel(getClassTypes());
        classType.setLabeText("ClassTyp");
        classType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classTypeItemStateChanged(evt);
            }
        });
        ticInterface.add(classType, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 130, 210, 60));

        PTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Passenger Name", "Age", "Gender", "Phone", "Zipcode"
            }
        ));
        jScrollPane1.setViewportView(PTable);

        ticInterface.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 610, 150));

        reserve.setText("RESERVE");
        reserve.setFont(new java.awt.Font("Lucida Handwriting", 1, 24)); // NOI18N
        reserve.setkBorderRadius(40);
        reserve.setkHoverForeGround(new java.awt.Color(255, 0, 0));
        reserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveActionPerformed(evt);
            }
        });
        ticInterface.add(reserve, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 370, 170, 40));

        addPassenger.setText("+");
        addPassenger.setAlignmentY(0.0F);
        addPassenger.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        addPassenger.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addPassenger.setkBorderRadius(100);
        addPassenger.setkEndColor(new java.awt.Color(0, 190, 33));
        addPassenger.setkHoverForeGround(new java.awt.Color(0, 0, 0));
        addPassenger.setkHoverStartColor(new java.awt.Color(0, 153, 153));
        addPassenger.setkStartColor(new java.awt.Color(85, 153, 153));
        addPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPassengerActionPerformed(evt);
            }
        });
        ticInterface.add(addPassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 155, 50, -1));

        noTickets.setBackground(new java.awt.Color(0, 0, 0));
        noTickets.setFont(new java.awt.Font("MV Boli", 0, 12)); // NOI18N
        noTickets.setText("No of Passengers" + this.pcount);
        ticInterface.add(noTickets, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 76, 140, 30));

        totalAmt.setBackground(new java.awt.Color(0, 0, 0));
        totalAmt.setFont(new java.awt.Font("MV Boli", 0, 12)); // NOI18N
        totalAmt.setText("Total Amount :" + this.total);
        ticInterface.add(totalAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, 140, 30));

        jPanel1.add(ticInterface, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 710, 430));

        Title.setFont(new java.awt.Font("Algerian", 0, 26)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 0));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Ticket Reservation");
        jPanel1.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 320, 40));

        Bg.setIcon(new javax.swing.ImageIcon("D:\\dbms\\RailwaySystem\\src\\main\\java\\com\\miniproject\\railwaysystem\\Assets\\ChennaiCentral.jpg")); // NOI18N
        jPanel1.add(Bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveActionPerformed
        DefaultTableModel model = (DefaultTableModel) PTable.getModel();
        if(!isDataValid())
        {
            JOptionPane.showMessageDialog(this, "Invalid Data", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(model.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(this, "No Passengers!!", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try { 
            this.conn.setAutoCommit(false);
            Savepoint beforeBook = this.conn.setSavepoint("BOOK_START");
            try{
                String sql = "select capacity AS SeatsAvailable from trainclassinfo where trainid = ? and tdate = ? and classname = ?";
                
                PreparedStatement stmt = conn.prepareStatement(sql);
                String trainid = this.Train.getSelectedItem().toString().split("-")[0];
                stmt.setInt(1,Integer.parseInt(trainid));
                java.sql.Date d1 = new java.sql.Date(sdf.parse(this.jDate.getText()).getTime());
                stmt.setDate(2, d1);
                stmt.setString(3,this.classType.getSelectedItem().toString());
                stmt.execute();
                ResultSet rs = stmt.getResultSet();
                if(rs.next())
                {
                    int count = rs.getInt("SeatsAvailable");
                    if(count<model.getRowCount())
                    {
                        conn.rollback(beforeBook);
                        this.conn.setAutoCommit(true);
                        String msg = "Seats Not Available for the given number of Passengers";
                        JOptionPane.showMessageDialog(this, msg, "Seats Not Available", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                PreparedStatement stmt2;
                sql = "INSERT INTO ticket VALUES(?,?,?,?,?,?,?,?)";
                stmt2 = conn.prepareStatement(sql);
                Random rnd = new Random();
                int pnr = rnd.nextInt(1, Integer.MAX_VALUE);
                stmt2.setInt(1,pnr);//pnr INT PRIMARY KEY,
                stmt2.setInt(2,Integer.parseInt(trainid)); //   trainid constraint
                stmt2.setDate(3, d1);   // dateofjourney DATE,
                String srcid = this.srcStat.getSelectedItem().toString().split("-")[0];
                stmt2.setString(4,srcid);//source varchar(10)  constraint fk_source REFERENCES stations(stationid) ,
                String destid = this.destStat.getSelectedItem().toString().split("-")[0];
                stmt2.setString(5,destid);//destination varchar(10)  constraint fk_destination REFERENCES stations(stationid),
                stmt2.setInt(6,this.price*model.getRowCount());    //totalamt INT,
                stmt2.setString(7,this.classType.getSelectedItem().toString());    //class varchar(5) ,
                stmt2.setInt(8,model.getRowCount());//totaltickets INT
                stmt2.execute();
                
                
                CallableStatement stmt3;
                for(int i=0;i<model.getRowCount();i++)
                {
                    stmt3 = conn.prepareCall("{call insert_passengers(?,?,?,?,?,?,?)}");
                    stmt3.setInt(1, Integer.parseInt(model.getValueAt(i, 0).toString()));//passengerid
                    stmt3.setString(2,model.getValueAt(i, 1).toString());//name
                    stmt3.setLong(3, Long.parseLong(model.getValueAt(i, 4).toString()));//phone
                    stmt3.setInt(4, Integer.parseInt(model.getValueAt(i, 2).toString()));//age
                    stmt3.setString(5,model.getValueAt(i, 3).toString());//gender
                    stmt3.setInt(6, Integer.parseInt(model.getValueAt(i, 5).toString()));//zipcode
                    stmt3.setInt(7, pnr);
                    stmt3.execute();
                }
                conn.commit();
                JOptionPane.showMessageDialog(this, "Ticket Booked \nPNR:"+pnr, "Reservation Success",JOptionPane.INFORMATION_MESSAGE);
                
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(this, ex, "Booking ERROR", JOptionPane.ERROR_MESSAGE);
                System.out.println("ROlLBACK");
                this.conn.rollback(beforeBook);
                Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
            }
          
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex, "SQL Exception:Connot Start Booking", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
        }
        clearAllInfo();
    }//GEN-LAST:event_reserveActionPerformed

    private void TrainItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TrainItemStateChanged
        // TODO add your handling code here:
        if(isTrainValid())
        {
            this.srcStat.setModel(this.getSrcStats());
            this.srcStat.repaint();
            this.destStat.repaint();
            updateBill();
        }
    }//GEN-LAST:event_TrainItemStateChanged

    private void srcStatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_srcStatItemStateChanged
        // TODO add your handling code here:
        if(isTrainValid() && isSrcStatValid())
        {
            this.destStat.setModel(this.getDestStats());
            this.destStat.repaint();
        }
    }//GEN-LAST:event_srcStatItemStateChanged

    private void jDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateKeyReleased
        // TODO add your handling code here:
        if(isDateValid() && isTrainValid())
        {
            this.classType.setModel(getClassTypes());
            this.classType.repaint();
            this.jDate.setValidText(true);
            repaint();
        }
        else
        {
            this.jDate.setValidText(false);
        }
        
    }//GEN-LAST:event_jDateKeyReleased

    private void jDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateActionPerformed

    private void jDateHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jDateHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateHierarchyChanged

    private void classTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classTypeItemStateChanged
        // TODO add your handling code here:
        if(isClassValid())
        {
            try {
                String sql = """
                                 select c.price
                                 FROM trainclassinfo c
                                 where c.trainid = ?
                                 AND c.tdate = ?
                                 AND c.classname = ?""";
                PreparedStatement stmt = this.conn.prepareStatement(sql);
                String tid = this.Train.getSelectedItem().toString().split("-")[0];
                stmt.setInt(1, Integer.parseInt(tid));
                stmt.setDate(2, getJourneyDate());
                stmt.setString(3, this.classType.getSelectedItem().toString());
                stmt.execute();
                ResultSet rs = stmt.getResultSet();
                if(rs.next())
                {
                    this.price = rs.getInt(1);
                }
                updateBill();
            } catch (SQLException ex) {
                Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
                this.price = 0;
                updateBill();
            }
        }
    }//GEN-LAST:event_classTypeItemStateChanged

    private void updateBill()
    {
        this.total = this.price *this.pcount;
        this.noTickets.setText("No of Passengers:" + this.pcount);
        this.totalAmt.setText("Total Amount :" + this.total);
        this.noTickets.repaint();
        this.totalAmt.repaint();
    }
    private void addPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPassengerActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.PTable.getModel();
        model.addRow(new Object[]{null,null,null,null,null,null});
        this.pcount++;
        updateBill();
    }//GEN-LAST:event_addPassengerActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        new MainPage(this.conn).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed
    private boolean isDateValid()
    {
        String dStr = this.jDate.getText();
        try {
            sdf.parse(dStr);
            return true;
        } catch (ParseException ex) {
            return false;
        }
    }
    private boolean isTrainValid()
    {
        return this.Train.getSelectedIndex()!=-1 && !this.Train.getSelectedItem().toString().contains("No Trains Found");
    }
    private  boolean isSrcStatValid()
    {
        return this.srcStat.getSelectedIndex()!=-1 && !this.srcStat.getSelectedItem().toString().contains("Select Train First");
    }
    private boolean isDestStatValid()
    {
        return this.destStat.getSelectedIndex()!=-1 && !this.destStat.getSelectedItem().toString().contains("Select Train And SrcStat First");
    }
    private boolean isClassValid()
    {
        return this.classType.getSelectedIndex()!=-1 && !this.classType.getSelectedItem().toString().contains("Select valid date");
    }
    private boolean isDataValid()
    {
        return isDateValid() && isTrainValid() && isSrcStatValid() && isDestStatValid() && isClassValid();
    }
    private java.sql.Date getJourneyDate()
    {
        String dStr = this.jDate.getText();
        try {
            java.sql.Date ssdate = new java.sql.Date(sdf.parse(dStr).getTime());
            return ssdate;
        } catch (ParseException ex) {
        }
        return null;
    }
    private int getTrainItem()
    {
        if(this.tid == null)
            return -1;
        for(int i=0;i<Train.getItemCount();i++)
        {
            if(Train.getItemAt(i).toString().contains(this.tid))
                return i;
        }
        return -1;
    }
    private int getSrcStat()
    {
        if(this.src == null)
            return -1;
        for(int i=0;i<srcStat.getItemCount();i++)
        {
            if(srcStat.getItemAt(i).toString().contains(this.src))
                return i;
        }
        return -1;
    }
    private int getDestStat()
    {
        if(this.dest == null)
            return -1;
        for(int i=0;i<destStat.getItemCount();i++)
        {
            if(destStat.getItemAt(i).toString().contains(this.dest))
                return i;
        }
        return -1;
    }
    public ComboBoxModel getTrains()
    {
        
        try {
            String sql = "SELECT trainid||'-'||trainname from trains";
            Statement stmt = this.conn.createStatement();
            stmt.execute(sql);
            ResultSet rs = stmt.getResultSet();
            ArrayList al = new ArrayList();
            while(rs.next())
            {
                al.add(rs.getObject(1));
            }
            ComboBoxModel model = new DefaultComboBoxModel(al.toArray());
            return model;
        } catch (SQLException ex) {
            Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new DefaultComboBoxModel(new Object[] {"No Trains Found"});
    }
    public ComboBoxModel getSrcStats()
    {
        if(isTrainValid())
        {
            try {
                String sql = """
                             SELECT s.stationid||'-'||s.stationname 
                             FROM trainStations t JOIN stations s 
                             on t.stationid = s.stationid
                             WHERE t.trainid = ?
                             AND t.stationid != (select destination from trains where trainid = ?)""";
                PreparedStatement stmt = this.conn.prepareStatement(sql);
                String tid = this.Train.getSelectedItem().toString().split("-")[0];
                stmt.setInt(1, Integer.parseInt(tid));
                stmt.setInt(2, Integer.parseInt(tid));
                stmt.execute();
                ResultSet rs = stmt.getResultSet();
                ArrayList al = new ArrayList();
                while(rs.next())
                {
                    al.add(rs.getObject(1));
                }
                ComboBoxModel model = new DefaultComboBoxModel(al.toArray());
                return model;
            } catch (SQLException ex) {
                Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            ComboBoxModel model = new DefaultComboBoxModel(new Object[] {"Select Train First"});
            return model;
        }
        return null;
    }
    public ComboBoxModel getDestStats()
    {
        if(isTrainValid() && isSrcStatValid())
        {
            try {
                String sql = """
                             select t.stationid||'-'||s.stationname
                             FROM trainStations t
                             JOIN stations s ON t.stationid = s.stationid
                             WHERE t.trainid = ?
                             AND t.arrival >  (select arrival from trainStations where stationid = ? AND trainid = ?)
                             """;
                PreparedStatement stmt = this.conn.prepareStatement(sql);
                String tid = this.Train.getSelectedItem().toString().split("-")[0];
                stmt.setInt(1, Integer.parseInt(tid));
                String srcid = this.srcStat.getSelectedItem().toString().split("-")[0];
                stmt.setString(2,srcid);
                stmt.setInt(3, Integer.parseInt(tid));
                stmt.execute();
                ResultSet rs = stmt.getResultSet();
                ArrayList al = new ArrayList();
                while(rs.next())
                {
                    al.add(rs.getObject(1));
                }
                ComboBoxModel model = new DefaultComboBoxModel(al.toArray());
                return model;
            } catch (SQLException ex) {
                Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            ComboBoxModel model = new DefaultComboBoxModel(new Object[] {"Select Train And SrcStat First"});
            return model;
        }
        return null;
    }
    public ComboBoxModel getClassTypes()
    {
        if(isTrainValid() && isDateValid())
        {
            try {
                String sql = """
                             select c.classname
                             FROM trainclassinfo c
                             where c.trainid = ?
                             AND c.tdate = ? """;
                PreparedStatement stmt = this.conn.prepareStatement(sql);
                String tid = this.Train.getSelectedItem().toString().split("-")[0];
                stmt.setInt(1, Integer.parseInt(tid));
                stmt.setDate(2, getJourneyDate()); 
                stmt.execute();
                ResultSet rs = stmt.getResultSet();
                ArrayList al = new ArrayList();
                while(rs.next())
                {
                    al.add(rs.getObject(1));
                }
                ComboBoxModel model = new DefaultComboBoxModel(al.toArray());
                return model;
            } catch (SQLException ex) {
                ComboBoxModel model = new DefaultComboBoxModel(new Object[] {"Select valid date"});
                Logger.getLogger(BookTicket.class.getName()).log(Level.INFO, null, ex);
                return model;
            }
        }
        else
        {
            ComboBoxModel model = new DefaultComboBoxModel(new Object[] {"Select valid date"});
            return model;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(BookTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(BookTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(BookTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(BookTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@//192.168.56.1:1521/ORCL", "sham", "sham");
            System.out.println("Connected to Oracle");
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(() -> {
                new BookTicket(conn, null, null, null, null).setVisible(true);
            });
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            System.out.println("Not Connected");
            Logger.getLogger(BookTicket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bg;
    private javax.swing.JTable PTable;
    private javax.swing.JLabel Title;
    private com.miniproject.railwaysystem.Widgets.ComboBox Train;
    private com.miniproject.railwaysystem.Widgets.KButton addPassenger;
    private com.miniproject.railwaysystem.Widgets.KButton backBtn;
    private com.miniproject.railwaysystem.Widgets.ComboBox classType;
    private com.miniproject.railwaysystem.Widgets.ComboBox destStat;
    private com.miniproject.railwaysystem.Widgets.TextField jDate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noTickets;
    private com.miniproject.railwaysystem.Widgets.KButton reserve;
    private com.miniproject.railwaysystem.Widgets.ComboBox srcStat;
    private javax.swing.JPanel ticInterface;
    private javax.swing.JLabel totalAmt;
    // End of variables declaration//GEN-END:variables

    private void clearAllInfo() {
        this.Train.setSelectedIndex(-1);
        this.srcStat.setSelectedIndex(-1);
        this.destStat.setSelectedIndex(-1);
        this.classType.setSelectedIndex(-1);
        this.jDate.setText("");
        this.price = 0;
        this.pcount = 0;
        this.total = 0;
        DefaultTableModel model = (DefaultTableModel) this.PTable.getModel();
        for(int i=0;i<model.getRowCount();i++)
        {
            model.removeRow(i);
        }
        this.Train.repaint();
        this.srcStat.repaint();
        this.destStat.repaint();
        this.classType.repaint();
        this.jDate.repaint();
        this.PTable.repaint();
        updateBill();
    }
}
